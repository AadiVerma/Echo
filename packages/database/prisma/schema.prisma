// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:7KtQiuSsmLG0@ep-nameless-bird-a1ws43n4.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
}
// model User {
//   id    String     @id @default(uuid())
//   username String  @unique
//   message  String?
// }

model User {
  id            String       @id @default(uuid()) 
  username      String       @unique 
  password      String       
  gender        Gender      
  profilePic    String?    
  createdAt     DateTime     @default(now()) 
  updatedAt     DateTime     @updatedAt 
  messages      Message[]    // One-to-many relationship with Message
  conversations ConversationParticipant[] // Many-to-many relationship with Conversation through ConversationParticipant
}
model Conversation {
  id            String       @id @default(uuid()) 
  createdAt     DateTime     @default(now()) 
  updatedAt     DateTime     @updatedAt 
  messages      Message[]    // One-to-many relationship with Message
  participants  ConversationParticipant[] // Many-to-many relationship with User via a join table
}
model ConversationParticipant {
  id             String      @id @default(uuid())
  userId         String     
  user           User        @relation(fields: [userId], references: [id]) 
  conversationId String      // Foreign key to Conversation
  conversation   Conversation @relation(fields: [conversationId], references: [id]) // Relationship to Conversation

  @@unique([userId, conversationId]) // A user can only participate in a conversation once
}

model Message {
  id            String       @id @default(uuid())
  conversationId String      
  conversation   Conversation @relation(fields: [conversationId], references: [id]) 
  senderId      String       // ID of the sender (user)
  sender        User         @relation(fields: [senderId], references: [id]) // Relationship to User
  body          String       // Message content
  createdAt     DateTime     @default(now()) // Timestamp when the message was created
  updatedAt     DateTime     @updatedAt // Auto-updates when the message is modified
}

enum Gender {
  male
  female
  other
  prefer_not_to_say
}
